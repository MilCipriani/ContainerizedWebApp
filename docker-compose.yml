name: ContainerizedWebApp


services:

    postgres-db:
        container_name: postgres-db
        networks:
            - my-network
        environment:
            - POSTGRES_PASSWORD=koicarp32
        volumes:
            - pgdata:/var/lib/postgresql/data
        ports:
            - 5432:5432
        restart: unless-stopped
        image: postgres:15.1-alpine3.16


    node-api:
        container_name: node-api
        build:
            context: api-node/
            dockerfile: Dockerfile
            target: dev #choose stage of multistage dockerfile (defaults to prod)
        init: true
        depends_on:
            - postgres-db
        networks:
            - my-network
        environment:
            - DATABASE_URL=postgres://postgres:koicarp32@postgres-db:5432/postgres
        ports:
            - 3000:3000
        restart: unless-stopped
        image: node-api


    react-client-vite:
        container_name: react-client-vite
        build:
            context: react-client/
            dockerfile: Dockerfile.1
        init: true
        networks:
            - my-network
        volumes:
            - ${PWD}/react-client:/usr/src/app #bind mount
            - /usr/src/app/node_modules #volume mount
        ports:
            - 5173:5173
        restart: unless-stopped
        image: react-client-vite

    
    react-client-ngnix:
        build:
            context: react-client/
            dockerfile: Dockerfile.2
        init: true
        container_name: react-client-ngnix
        networks:
            - my-network
        ports:
            - 80:8080
        restart: unless-stopped
        image: react-client-ngnix


networks:
    my-network:
#        external: true
        name: my-network


volumes:
    pgdata:
        external: true
        name: pgdata